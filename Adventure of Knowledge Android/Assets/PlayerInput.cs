//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""6fd0ee73-53c5-41a7-84e5-4fcaf4d46a80"",
            ""actions"": [
                {
                    ""name"": ""TouchScreenPosition"",
                    ""type"": ""Value"",
                    ""id"": ""3990eea6-3651-4d12-abb9-1139616bb2f6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchScreenPress"",
                    ""type"": ""Button"",
                    ""id"": ""8c14ceb3-fc89-4336-a52c-64f32221ecf5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""c747eb31-65f4-40e8-b71d-60b26557376b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseLeftButtonPress"",
                    ""type"": ""Button"",
                    ""id"": ""f35e4cfd-86f2-4336-92c7-40bb1d02704e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""03e24554-c2dc-41b9-851d-d5bf0f5854cb"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchScreenPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f5a5c172-6cea-46cf-ace0-86e2dab44f26"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchScreenPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c9870ba-9631-4154-a7cb-38bba2ca1a3b"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""990f2e3a-7ce6-4706-97d9-216b4a92d9c0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLeftButtonPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_TouchScreenPosition = m_Player.FindAction("TouchScreenPosition", throwIfNotFound: true);
        m_Player_TouchScreenPress = m_Player.FindAction("TouchScreenPress", throwIfNotFound: true);
        m_Player_MousePosition = m_Player.FindAction("MousePosition", throwIfNotFound: true);
        m_Player_MouseLeftButtonPress = m_Player.FindAction("MouseLeftButtonPress", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_TouchScreenPosition;
    private readonly InputAction m_Player_TouchScreenPress;
    private readonly InputAction m_Player_MousePosition;
    private readonly InputAction m_Player_MouseLeftButtonPress;
    public struct PlayerActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchScreenPosition => m_Wrapper.m_Player_TouchScreenPosition;
        public InputAction @TouchScreenPress => m_Wrapper.m_Player_TouchScreenPress;
        public InputAction @MousePosition => m_Wrapper.m_Player_MousePosition;
        public InputAction @MouseLeftButtonPress => m_Wrapper.m_Player_MouseLeftButtonPress;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @TouchScreenPosition.started += instance.OnTouchScreenPosition;
            @TouchScreenPosition.performed += instance.OnTouchScreenPosition;
            @TouchScreenPosition.canceled += instance.OnTouchScreenPosition;
            @TouchScreenPress.started += instance.OnTouchScreenPress;
            @TouchScreenPress.performed += instance.OnTouchScreenPress;
            @TouchScreenPress.canceled += instance.OnTouchScreenPress;
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
            @MouseLeftButtonPress.started += instance.OnMouseLeftButtonPress;
            @MouseLeftButtonPress.performed += instance.OnMouseLeftButtonPress;
            @MouseLeftButtonPress.canceled += instance.OnMouseLeftButtonPress;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @TouchScreenPosition.started -= instance.OnTouchScreenPosition;
            @TouchScreenPosition.performed -= instance.OnTouchScreenPosition;
            @TouchScreenPosition.canceled -= instance.OnTouchScreenPosition;
            @TouchScreenPress.started -= instance.OnTouchScreenPress;
            @TouchScreenPress.performed -= instance.OnTouchScreenPress;
            @TouchScreenPress.canceled -= instance.OnTouchScreenPress;
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
            @MouseLeftButtonPress.started -= instance.OnMouseLeftButtonPress;
            @MouseLeftButtonPress.performed -= instance.OnMouseLeftButtonPress;
            @MouseLeftButtonPress.canceled -= instance.OnMouseLeftButtonPress;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnTouchScreenPosition(InputAction.CallbackContext context);
        void OnTouchScreenPress(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
        void OnMouseLeftButtonPress(InputAction.CallbackContext context);
    }
}
